{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "supabase-realtime-dev-tools",
  "type": "registry:component",
  "title": "Supabase Realtime Dev Tools",
  "description": "A component for displaying Supabase Realtime dev tools",
  "dependencies": [
    "react",
    "lucide-react",
    "@supabase/supabase-js",
    "@radix-ui/react-scroll-area",
    "@radix-ui/react-switch",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "button",
    "input",
    "badge",
    "card",
    "scroll-area",
    "switch"
  ],
  "files": [
    {
      "path": "registry/new-york/supabase-realtime-dev-tools/supabase-realtime-dev-tools.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  useEffect,\r\n  useState,\r\n  useRef,\r\n  useCallback,\r\n  useMemo,\r\n} from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { ScrollArea, ScrollBar } from \"@/components/ui/scroll-area\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  ChevronDown,\r\n  ChevronRight,\r\n  X,\r\n  Trash2,\r\n  Radio,\r\n  Database,\r\n  MessageSquare,\r\n  Clock,\r\n  CheckCircle,\r\n  XCircle,\r\n  AlertTriangle,\r\n  Info,\r\n  WifiOff,\r\n  Play,\r\n  Square,\r\n  Send,\r\n} from \"lucide-react\";\r\nimport { RealtimePostgresChangesPayload } from \"@supabase/supabase-js\";\r\n\r\ninterface LogEntry {\r\n  id: number;\r\n  timestamp: string;\r\n  type: \"info\" | \"success\" | \"error\" | \"warning\";\r\n  source?: \"self\" | \"external\" | \"system\";\r\n  message: string;\r\n  details?: any;\r\n  isExpanded?: boolean;\r\n}\r\n\r\ninterface SupabaseDevToolsProps {\r\n  supabaseClient?: any;\r\n  position?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\r\n  defaultChannel?: string;\r\n  maxLogs?: number;\r\n  enableKeyboardShortcut?: boolean;\r\n  keyboardShortcut?: string;\r\n}\r\n\r\ninterface DevToolsConfig {\r\n  channelName: string;\r\n}\r\n\r\ninterface AuthState {\r\n  isAuthenticated: boolean;\r\n  error?: string;\r\n  lastChecked: number;\r\n}\r\n\r\ninterface BroadcastPayload {\r\n  event: string;\r\n  payload: any;\r\n}\r\n\r\nconst STORAGE_KEY = \"supabase-devtools-config\";\r\nconst AUTH_CHECK_INTERVAL = 30000; // 30 seconds\r\n\r\nconst SupabaseDevTools: React.FC<SupabaseDevToolsProps> = ({\r\n  supabaseClient,\r\n  position = \"bottom-right\",\r\n  defaultChannel = \"project-updates\",\r\n  maxLogs = 100,\r\n  enableKeyboardShortcut = true,\r\n  keyboardShortcut = \"Ctrl+Shift+S\",\r\n}) => {\r\n  const supabase =\r\n    supabaseClient || (typeof window !== \"undefined\" ? window : null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [logs, setLogs] = useState<LogEntry[]>([]);\r\n  const [authState, setAuthState] = useState<AuthState>({\r\n    isAuthenticated: false,\r\n    lastChecked: 0,\r\n  });\r\n\r\n  // Monitoring state\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [isSelfHosted, setIsSelfHosted] = useState(false);\r\n\r\n  // Configuration state\r\n  const [config, setConfig] = useState<DevToolsConfig>(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return { channelName: \"project-updates\" };\r\n    }\r\n\r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      if (stored) {\r\n        const parsed = JSON.parse(stored);\r\n        return {\r\n          channelName: parsed.channelName || \"project-updates\",\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.warn(\"Failed to parse devtools config from localStorage:\", error);\r\n    }\r\n\r\n    return { channelName: \"project-updates\" };\r\n  });\r\n\r\n  // Refs for cleanup and state management\r\n  const monitorChannelRef = useRef<any>(null);\r\n  const authCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  const logIdCounterRef = useRef(0);\r\n  const mountedRef = useRef(true);\r\n\r\n  // Memoized error state\r\n  const hasAuthError = useMemo(() => {\r\n    return !authState.isAuthenticated && authState.error;\r\n  }, [authState.isAuthenticated, authState.error]);\r\n\r\n  // Update config and localStorage\r\n  const updateConfig = useCallback((updates: Partial<DevToolsConfig>) => {\r\n    setConfig((prev) => {\r\n      const newConfig = { ...prev, ...updates };\r\n\r\n      if (mountedRef.current && typeof window !== \"undefined\") {\r\n        try {\r\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(newConfig));\r\n        } catch (error) {\r\n          console.warn(\r\n            \"Failed to save devtools config to localStorage:\",\r\n            error\r\n          );\r\n        }\r\n      }\r\n\r\n      return newConfig;\r\n    });\r\n  }, []);\r\n\r\n  // Optimized log management\r\n  const addLog = useCallback(\r\n    (\r\n      type: LogEntry[\"type\"],\r\n      message: string,\r\n      source?: LogEntry[\"source\"],\r\n      details?: any\r\n    ) => {\r\n      if (!mountedRef.current) return;\r\n\r\n      logIdCounterRef.current += 1;\r\n      const newLog: LogEntry = {\r\n        id: logIdCounterRef.current,\r\n        timestamp: new Date().toLocaleTimeString(\"en-US\", {\r\n          hour12: false,\r\n          hour: \"2-digit\",\r\n          minute: \"2-digit\",\r\n          second: \"2-digit\",\r\n        }),\r\n        type,\r\n        message,\r\n        details,\r\n        isExpanded: false,\r\n      };\r\n\r\n      setLogs((prev) => [newLog, ...prev].slice(0, maxLogs));\r\n    },\r\n    []\r\n  );\r\n\r\n  // Check Supabase authentication\r\n  const checkAuth = useCallback(async () => {\r\n    if (!mountedRef.current) return;\r\n\r\n    try {\r\n      if (!supabase) {\r\n        throw new Error(\"Supabase client is not initialized\");\r\n      }\r\n\r\n      const {\r\n        data: { session },\r\n        error,\r\n      } = await supabase.auth.getSession();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const isAuthenticated = !!session;\r\n\r\n      setAuthState({\r\n        isAuthenticated,\r\n        error: isAuthenticated ? undefined : \"No active session\",\r\n        lastChecked: Date.now(),\r\n      });\r\n\r\n      if (!isAuthenticated) {\r\n        addLog(\"warning\", \"üîí No active Supabase session detected\", \"system\", {\r\n          session: null,\r\n          timestamp: new Date().toISOString(),\r\n        });\r\n      }\r\n    } catch (error: any) {\r\n      const errorMessage = error?.message || \"Authentication check failed\";\r\n\r\n      setAuthState({\r\n        isAuthenticated: false,\r\n        error: errorMessage,\r\n        lastChecked: Date.now(),\r\n      });\r\n\r\n      addLog(\"error\", `üî¥ Supabase auth failed: ${errorMessage}`, \"system\", {\r\n        error: error instanceof Error ? error : new Error(errorMessage),\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    }\r\n  }, [addLog]);\r\n\r\n  // Track filtered message count for transparency\r\n  const [filteredCount, setFilteredCount] = useState(0);\r\n\r\n  // Start monitoring channel\r\n  const startMonitoring = useCallback(() => {\r\n    if (!mountedRef.current || !authState.isAuthenticated) {\r\n      addLog(\"error\", \"Cannot start monitoring - not authenticated\", \"system\");\r\n      return;\r\n    }\r\n\r\n    if (!config.channelName.trim()) {\r\n      addLog(\"error\", \"Please enter a channel name to monitor\", \"system\");\r\n      return;\r\n    }\r\n\r\n    // Clean up existing channel\r\n    if (monitorChannelRef.current) {\r\n      try {\r\n        monitorChannelRef.current.unsubscribe();\r\n      } catch (error) {\r\n        console.warn(\"Error unsubscribing from channel:\", error);\r\n      }\r\n      monitorChannelRef.current = null;\r\n    }\r\n\r\n    setIsMonitoring(true);\r\n    setFilteredCount(0); // Reset filtered count when starting monitoring\r\n    addLog(\r\n      \"success\",\r\n      `‚úÖ Starting monitoring for ${config.channelName}`,\r\n      \"system\"\r\n    );\r\n\r\n    const channel = supabase.channel(config.channelName);\r\n    monitorChannelRef.current = channel;\r\n\r\n    channel\r\n      .on(\"broadcast\", { event: \"*\" }, (payload: BroadcastPayload) => {\r\n        if (!mountedRef.current) return;\r\n\r\n        addLog(\r\n          \"success\",\r\n          `üìª Received broadcast on ${config.channelName}`,\r\n          \"external\",\r\n          {\r\n            channel: config.channelName,\r\n            event: payload.event,\r\n            payload: payload.payload,\r\n            timestamp: new Date().toISOString(),\r\n          }\r\n        );\r\n      })\r\n      .on(\r\n        \"postgres_changes\",\r\n        { event: \"*\", schema: \"*\", table: \"*\" },\r\n        (payload: RealtimePostgresChangesPayload<any>) => {\r\n          if (!mountedRef.current) return;\r\n\r\n          addLog(\"success\", `üóÑÔ∏è Database change`, \"external\", {\r\n            channel: config.channelName,\r\n            eventType: payload.eventType,\r\n            table: payload.table,\r\n            schema: payload.schema,\r\n            new: payload.new,\r\n            old: payload.old,\r\n          });\r\n        }\r\n      )\r\n      .subscribe((status: string, err?: Error) => {\r\n        if (!mountedRef.current) return;\r\n\r\n        if (err) {\r\n          addLog(\"error\", `‚ùå Subscription error: ${err.message}`, \"system\", {\r\n            channel: config.channelName,\r\n            error: err,\r\n          });\r\n          setIsMonitoring(false);\r\n        } else {\r\n          addLog(\"info\", `üì° Subscription status: ${status}`, \"system\", {\r\n            channel: config.channelName,\r\n            status,\r\n          });\r\n\r\n          if (status === \"SUBSCRIBED\") {\r\n            addLog(\r\n              \"success\",\r\n              `‚úÖ Successfully monitoring ${config.channelName}`\r\n            );\r\n          } else if (status === \"CHANNEL_ERROR\") {\r\n            setIsMonitoring(false);\r\n          }\r\n        }\r\n      });\r\n  }, [config.channelName, authState.isAuthenticated, addLog]);\r\n\r\n  // Stop monitoring\r\n  const stopMonitoring = useCallback(() => {\r\n    if (monitorChannelRef.current) {\r\n      try {\r\n        monitorChannelRef.current.unsubscribe();\r\n        addLog(\"info\", `‚èπÔ∏è Stopped monitoring ${config.channelName}`, \"system\");\r\n      } catch (error) {\r\n        addLog(\"warning\", `‚ö†Ô∏è Error stopping monitoring: ${error}`, \"system\");\r\n      }\r\n      monitorChannelRef.current = null;\r\n    }\r\n\r\n    setIsMonitoring(false);\r\n    setIsSelfHosted(false);\r\n  }, [config.channelName, addLog]);\r\n\r\n  // Self-broadcast (when toggle is ON)\r\n  const sendSelfBroadcast = useCallback(() => {\r\n    if (!mountedRef.current || !authState.isAuthenticated || !isMonitoring) {\r\n      addLog(\r\n        \"warning\",\r\n        \"Cannot send broadcast: not authenticated or monitoring\",\r\n        \"system\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const testPayload = {\r\n      message: \"DevTools self-broadcast\",\r\n      timestamp: new Date().toISOString(),\r\n      testId: Math.random().toString(36).substr(2, 9),\r\n      mode: \"self-hosted\",\r\n    };\r\n\r\n    try {\r\n      const channel = supabase.channel(config.channelName);\r\n\r\n      channel\r\n        .send({\r\n          type: \"broadcast\",\r\n          event: \"devtools-self-broadcast\",\r\n          payload: testPayload,\r\n        })\r\n        .then(() => {\r\n          if (!mountedRef.current) return;\r\n          addLog(\"success\", `üì° Self-broadcast sent`, \"self\", {\r\n            payload: testPayload,\r\n            channel: config.channelName,\r\n            mode: \"self-hosted\",\r\n          });\r\n        })\r\n        .catch((error: Error) => {\r\n          if (!mountedRef.current) return;\r\n          addLog(\r\n            \"error\",\r\n            `‚ùå Self-broadcast failed: ${error.message}`,\r\n            \"system\",\r\n            {\r\n              error,\r\n              channel: config.channelName,\r\n            }\r\n          );\r\n        });\r\n    } catch (error: any) {\r\n      addLog(\r\n        \"error\",\r\n        `‚ùå Self-broadcast setup failed: ${error?.message || \"Unknown error\"}`,\r\n        \"system\",\r\n        {\r\n          error:\r\n            error instanceof Error\r\n              ? error\r\n              : new Error(error?.message || \"Unknown error\"),\r\n          channel: config.channelName,\r\n        }\r\n      );\r\n    }\r\n  }, [config.channelName, authState.isAuthenticated, isMonitoring, addLog]);\r\n\r\n  // Toggle self-hosted mode\r\n  const toggleSelfHosted = useCallback(\r\n    (checked: boolean) => {\r\n      if (!isMonitoring) {\r\n        addLog(\"warning\", \"Start monitoring first before changing mode\");\r\n        return;\r\n      }\r\n\r\n      setIsSelfHosted(checked);\r\n      addLog(\r\n        \"info\",\r\n        `üîÑ Switched to ${checked ? \"self-hosted\" : \"listener\"} mode`\r\n      );\r\n    },\r\n    [isMonitoring, addLog]\r\n  );\r\n\r\n  // Utility functions\r\n  const toggleLogDetails = useCallback((logId: number) => {\r\n    setLogs((prev) =>\r\n      prev.map((log) =>\r\n        log.id === logId ? { ...log, isExpanded: !log.isExpanded } : log\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const clearLogs = useCallback(() => {\r\n    setLogs([]);\r\n    logIdCounterRef.current = 0;\r\n    // Don't add log message when clearing - per requirement\r\n  }, []);\r\n\r\n  const handleChannelNameChange = useCallback(\r\n    (value: string) => {\r\n      updateConfig({ channelName: value });\r\n    },\r\n    [updateConfig]\r\n  );\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    mountedRef.current = true;\r\n\r\n    // Initial auth check\r\n    checkAuth();\r\n\r\n    // Set up auth check interval\r\n    authCheckIntervalRef.current = setInterval(checkAuth, AUTH_CHECK_INTERVAL);\r\n\r\n    return () => {\r\n      mountedRef.current = false;\r\n\r\n      if (authCheckIntervalRef.current) {\r\n        clearInterval(authCheckIntervalRef.current);\r\n      }\r\n    };\r\n  }, [checkAuth]);\r\n\r\n  useEffect(() => {\r\n    if (!authState.isAuthenticated && isMonitoring) {\r\n      // Stop monitoring if auth is lost\r\n      stopMonitoring();\r\n    }\r\n  }, [authState.isAuthenticated, isMonitoring, stopMonitoring]);\r\n\r\n  useEffect(() => {\r\n    if (!enableKeyboardShortcut) return;\r\n\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      // Parse keyboard shortcut (default: Ctrl+Shift+S)\r\n      const parts = keyboardShortcut.toLowerCase().split(\"+\");\r\n      const hasCtrl = parts.includes(\"ctrl\") && e.ctrlKey;\r\n      const hasShift = parts.includes(\"shift\") && e.shiftKey;\r\n      const hasAlt = parts.includes(\"alt\") && e.altKey;\r\n      const key = parts[parts.length - 1];\r\n\r\n      if (hasCtrl && hasShift && e.key.toLowerCase() === key && !hasAlt) {\r\n        e.preventDefault();\r\n        if (hasAuthError) return; // Don't allow toggle when there's an error\r\n        setIsOpen((prev) => !prev);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [hasAuthError, enableKeyboardShortcut, keyboardShortcut]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      mountedRef.current = false;\r\n\r\n      // Clean up channel subscription\r\n      if (monitorChannelRef.current) {\r\n        try {\r\n          monitorChannelRef.current.unsubscribe();\r\n        } catch (error) {\r\n          console.warn(\"Error during cleanup:\", error);\r\n        }\r\n        monitorChannelRef.current = null;\r\n      }\r\n\r\n      // Clean up auth check interval\r\n      if (authCheckIntervalRef.current) {\r\n        clearInterval(authCheckIntervalRef.current);\r\n        authCheckIntervalRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Memoized computed values\r\n  const statusColor = useMemo(() => {\r\n    if (hasAuthError) return \"text-red-500\";\r\n    if (authState.isAuthenticated && isMonitoring) return \"text-green-500\";\r\n    return \"text-muted-foreground\";\r\n  }, [hasAuthError, authState.isAuthenticated, isMonitoring]);\r\n\r\n  const indicatorColor = useMemo(() => {\r\n    if (hasAuthError) return \"bg-red-500\";\r\n    if (authState.isAuthenticated && isMonitoring) return \"bg-green-500\";\r\n    return \"bg-muted-foreground\";\r\n  }, [hasAuthError, authState.isAuthenticated, isMonitoring]);\r\n\r\n  const getLogIcon = useCallback((type: LogEntry[\"type\"]) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n      case \"error\":\r\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\r\n      case \"warning\":\r\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\r\n      default:\r\n        return <Info className=\"w-4 h-4 text-blue-500\" />;\r\n    }\r\n  }, []);\r\n\r\n  const getSourceBadge = useCallback((source: LogEntry[\"source\"]) => {\r\n    switch (source) {\r\n      case \"self\":\r\n        return (\r\n          <Badge\r\n            variant=\"default\"\r\n            className=\"text-xs bg-blue-100 text-blue-800\"\r\n          >\r\n            Self\r\n          </Badge>\r\n        );\r\n      case \"external\":\r\n        return (\r\n          <Badge\r\n            variant=\"secondary\"\r\n            className=\"text-xs bg-green-100 text-green-800\"\r\n          >\r\n            External\r\n          </Badge>\r\n        );\r\n      case \"system\":\r\n        return (\r\n          <Badge variant=\"outline\" className=\"text-xs\">\r\n            System\r\n          </Badge>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }, []);\r\n\r\n  // Position classes\r\n  const positionClasses = useMemo(() => {\r\n    switch (position) {\r\n      case \"bottom-left\":\r\n        return \"bottom-4 left-4\";\r\n      case \"top-right\":\r\n        return \"top-4 right-4\";\r\n      case \"top-left\":\r\n        return \"top-4 left-4\";\r\n      default:\r\n        return \"bottom-4 right-4\";\r\n    }\r\n  }, [position]);\r\n\r\n  const panelPositionClasses = useMemo(() => {\r\n    switch (position) {\r\n      case \"bottom-left\":\r\n        return \"bottom-0 left-0 rounded-tr-xl border-r-0 border-b-0 border-l-0\";\r\n      case \"top-right\":\r\n        return \"top-0 right-0 rounded-bl-xl border-l-0 border-t-0 border-r-0\";\r\n      case \"top-left\":\r\n        return \"top-0 left-0 rounded-br-xl border-r-0 border-t-0 border-l-0\";\r\n      default:\r\n        return \"bottom-0 right-0 rounded-tl-xl border-l-0 border-b-0 border-r-0\";\r\n    }\r\n  }, [position]);\r\n\r\n  if (!isOpen) {\r\n    return (\r\n      <div\r\n        onClick={() => !hasAuthError && setIsOpen(true)}\r\n        className={cn(\r\n          \"fixed bottom-4 right-4 z-50 group\",\r\n          hasAuthError && \"cursor-not-allowed\"\r\n        )}\r\n        title={\r\n          hasAuthError\r\n            ? `Supabase DevTools - Error: ${authState.error}`\r\n            : \"Open Supabase DevTools (Ctrl+Shift+S)\"\r\n        }\r\n      >\r\n        <div\r\n          className={cn(\r\n            \"bg-background border border-border p-3 rounded-lg shadow-lg transition-all duration-300\",\r\n            hasAuthError\r\n              ? \"border-red-500 bg-red-50\"\r\n              : \"cursor-pointer hover:shadow-xl transform hover:scale-105\"\r\n          )}\r\n        >\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"relative\">\r\n              <div className={cn(\"w-3 h-3 rounded-full\", indicatorColor)}></div>\r\n              {isMonitoring && !hasAuthError && (\r\n                <div\r\n                  className={cn(\r\n                    \"absolute inset-0 w-3 h-3 rounded-full animate-ping opacity-75\",\r\n                    indicatorColor\r\n                  )}\r\n                ></div>\r\n              )}\r\n            </div>\r\n            <span\r\n              className={cn(\r\n                \"text-sm font-mono font-semibold\",\r\n                hasAuthError ? \"text-red-600\" : \"text-foreground\"\r\n              )}\r\n            >\r\n              {hasAuthError ? \"Auth Error\" : \"Supabase\"}\r\n            </span>\r\n            {hasAuthError && <WifiOff className=\"w-4 h-4 text-red-500\" />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"fixed bottom-0 right-0 z-50 w-[450px] h-screen\">\r\n      <Card className=\"h-full w-full border-l-0 border-b-0 border-r-0 rounded-none rounded-tl-xl bg-background/95 backdrop-blur-sm border-border shadow-2xl\">\r\n        <CardHeader className=\"pb-3 border-b\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2 text-sm\">\r\n              <div className=\"relative\">\r\n                <div\r\n                  className={cn(\"w-3 h-3 rounded-full\", indicatorColor)}\r\n                ></div>\r\n                {isMonitoring && !hasAuthError && (\r\n                  <div\r\n                    className={cn(\r\n                      \"absolute inset-0 w-3 h-3 rounded-full animate-ping opacity-75\",\r\n                      indicatorColor\r\n                    )}\r\n                  ></div>\r\n                )}\r\n              </div>\r\n              <span className=\"font-mono font-semibold\">Supabase DevTools</span>\r\n              <Badge variant=\"outline\" className=\"text-xs\">\r\n                v2.1\r\n              </Badge>\r\n            </CardTitle>\r\n            <Button\r\n              onClick={() => setIsOpen(false)}\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className=\"h-8 w-8 p-0\"\r\n            >\r\n              <X className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"p-0 h-[calc(100vh-80px)] flex flex-col\">\r\n          {hasAuthError && (\r\n            <div className=\"p-4 bg-red-50 border-b border-red-200\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <WifiOff className=\"w-4 h-4 text-red-500\" />\r\n                <span className=\"text-sm font-semibold text-red-700\">\r\n                  Authentication Error\r\n                </span>\r\n              </div>\r\n              <p className=\"text-xs text-red-600 mt-1\">{authState.error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Channel Input and Monitor Controls */}\r\n          <div\r\n            className={cn(\r\n              \"p-4 border-b bg-muted/30\",\r\n              hasAuthError && \"opacity-50\"\r\n            )}\r\n          >\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Radio className=\"w-4 h-4 text-muted-foreground\" />\r\n                <h3 className=\"text-sm font-semibold\">Channel Monitor</h3>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Input\r\n                  value={config.channelName}\r\n                  onChange={(e) => handleChannelNameChange(e.target.value)}\r\n                  placeholder=\"Enter channel name...\"\r\n                  disabled={isMonitoring || !!hasAuthError}\r\n                  className=\"flex-1 h-9 text-sm\"\r\n                />\r\n                {!isMonitoring ? (\r\n                  <Button\r\n                    onClick={startMonitoring}\r\n                    disabled={!config.channelName.trim() || !!hasAuthError}\r\n                    size=\"sm\"\r\n                    className=\"h-9 px-3\"\r\n                  >\r\n                    <Play className=\"w-3 h-3 mr-1\" />\r\n                    Monitor\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    onClick={stopMonitoring}\r\n                    variant=\"destructive\"\r\n                    size=\"sm\"\r\n                    className=\"h-9 px-3\"\r\n                  >\r\n                    <Square className=\"w-3 h-3 mr-1\" />\r\n                    Stop\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              {isMonitoring && (\r\n                <div className=\"space-y-3\">\r\n                  <div className=\"flex items-center gap-2 p-2 bg-green-50 rounded-md border border-green-200\">\r\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\r\n                    <span className=\"text-xs text-green-700 font-medium\">\r\n                      Monitoring: {config.channelName}\r\n                    </span>\r\n                  </div>\r\n\r\n                  {/* Toggle Mode */}\r\n                  <div className=\"flex items-center justify-between p-3 bg-muted rounded-md border\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <span className=\"text-sm font-medium\">\r\n                        {isSelfHosted ? \"Self-Hosted Mode\" : \"Listener Mode\"}\r\n                      </span>\r\n                      <Badge\r\n                        variant={isSelfHosted ? \"default\" : \"secondary\"}\r\n                        className=\"text-xs\"\r\n                      >\r\n                        {isSelfHosted ? \"Broadcasting\" : \"Receiving\"}\r\n                      </Badge>\r\n                    </div>\r\n                    <Switch\r\n                      checked={isSelfHosted}\r\n                      onCheckedChange={toggleSelfHosted}\r\n                      disabled={!!hasAuthError}\r\n                    />\r\n                  </div>\r\n\r\n                  {/* Broadcast Button - Only visible in self-hosted mode */}\r\n                  {isSelfHosted && (\r\n                    <Button\r\n                      onClick={sendSelfBroadcast}\r\n                      className=\"w-full h-9\"\r\n                      disabled={!!hasAuthError}\r\n                    >\r\n                      <Send className=\"w-3 h-3 mr-2\" />\r\n                      Send Broadcast\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Status Section */}\r\n          <div\r\n            className={cn(\r\n              \"p-4 border-b bg-muted/30\",\r\n              hasAuthError && \"opacity-50\"\r\n            )}\r\n          >\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <CheckCircle className=\"w-4 h-4 text-muted-foreground\" />\r\n                  <h3 className=\"text-sm font-semibold\">Status</h3>\r\n                </div>\r\n                <Badge variant=\"outline\" className={cn(\"text-xs\", statusColor)}>\r\n                  {hasAuthError\r\n                    ? \"Auth Error\"\r\n                    : authState.isAuthenticated\r\n                    ? isMonitoring\r\n                      ? \"Monitoring\"\r\n                      : \"Ready\"\r\n                    : \"Not Authenticated\"}\r\n                </Badge>\r\n              </div>\r\n\r\n              <div className=\"text-xs text-muted-foreground\">\r\n                {isMonitoring\r\n                  ? `${\r\n                      isSelfHosted ? \"Self-hosting\" : \"Listening for\"\r\n                    } messages on ${config.channelName}`\r\n                  : \"Enter channel name and click Monitor to start\"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Logs Section */}\r\n          <div className=\"p-4 border-b bg-muted/30\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <MessageSquare className=\"w-4 h-4 text-muted-foreground\" />\r\n                <h3 className=\"text-sm font-semibold\">\r\n                  Realtime Logs\r\n                  <Badge variant=\"outline\" className=\"ml-2 text-xs\">\r\n                    {logs.length}\r\n                  </Badge>\r\n                </h3>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"secondary\" className=\"text-xs\">\r\n                  Ctrl+Shift+S\r\n                </Badge>\r\n                <Button\r\n                  onClick={clearLogs}\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"h-7 px-2\"\r\n                  disabled={!!hasAuthError}\r\n                >\r\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\r\n                  Clear\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Logs Display */}\r\n          <div className=\"flex-1 overflow-hidden\">\r\n            <ScrollArea className=\"h-full\">\r\n              {logs.length === 0 ? (\r\n                <div className=\"flex flex-col items-center justify-center h-64 text-center p-8\">\r\n                  <div className=\"w-16 h-16 rounded-full bg-muted flex items-center justify-center mb-4\">\r\n                    <MessageSquare className=\"w-8 h-8 text-muted-foreground\" />\r\n                  </div>\r\n                  <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">\r\n                    No logs yet\r\n                  </h4>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {hasAuthError\r\n                      ? \"Fix authentication to see logs\"\r\n                      : \"Start monitoring to see realtime activity\"}\r\n                  </p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-3 space-y-2\">\r\n                  {logs.map((log) => (\r\n                    <Card\r\n                      key={log.id}\r\n                      className=\"overflow-hidden transition-all duration-200 hover:shadow-md\"\r\n                    >\r\n                      <CardContent className=\"p-3\">\r\n                        <div className=\"flex items-start gap-3\">\r\n                          <div className=\"flex flex-col items-center gap-1 pt-0.5\">\r\n                            {getLogIcon(log.type)}\r\n                            <div className=\"w-px h-4 bg-border last:hidden\"></div>\r\n                          </div>\r\n\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"flex items-center justify-between gap-2 mb-1\">\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <Badge\r\n                                  variant=\"outline\"\r\n                                  className=\"text-xs capitalize\"\r\n                                >\r\n                                  {log.type}\r\n                                </Badge>\r\n                                <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\r\n                                  <Clock className=\"w-3 h-3\" />\r\n                                  {log.timestamp}\r\n                                </div>\r\n                              </div>\r\n                              {log.details && (\r\n                                <Button\r\n                                  onClick={() => toggleLogDetails(log.id)}\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-6 w-6 p-0\"\r\n                                >\r\n                                  {log.isExpanded ? (\r\n                                    <ChevronDown className=\"w-3 h-3\" />\r\n                                  ) : (\r\n                                    <ChevronRight className=\"w-3 h-3\" />\r\n                                  )}\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n\r\n                            <p className=\"text-sm text-foreground font-mono leading-relaxed\">\r\n                              {log.message}\r\n                            </p>\r\n\r\n                            {log.details && log.isExpanded && (\r\n                              <div className=\"mt-3 p-3 bg-muted rounded-md border\">\r\n                                <div className=\"flex items-center gap-1 mb-2\">\r\n                                  <Database className=\"w-3 h-3 text-muted-foreground\" />\r\n                                  <span className=\"text-xs font-semibold text-muted-foreground\">\r\n                                    DETAILS\r\n                                  </span>\r\n                                </div>\r\n                                <ScrollArea className=\"max-h-40\">\r\n                                  <pre className=\"text-xs font-mono text-foreground whitespace-pre-wrap break-words\">\r\n                                    {JSON.stringify(log.details, null, 2)}\r\n                                  </pre>\r\n                                </ScrollArea>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n              <ScrollBar orientation=\"vertical\" />\r\n            </ScrollArea>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SupabaseDevTools;\r\n",
      "type": "registry:component"
    }
  ]
}